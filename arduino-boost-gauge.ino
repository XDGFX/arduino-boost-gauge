
//Arduino pro micro, .93" I2C OLED use pin 2 for SDA and 3 for SCL ***Look up i2c pins for your controller

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define sensorPin A2
#define refPin A0
#define WINDOW_SIZE 6

int OLED_RESET = -1;
Adafruit_SSD1306 display(OLED_RESET); //driver for the screen

// bar graph

float rawval = 0;   // Setup raw sensor value
float barboost = 0; // Setup value for boost bar

// peak

int boostPeakReset = 4000; // time in milis to reset peak value
float boostPeak = 0.00;
float boostMax = 0.00;
unsigned long boostPeakTimer = 0;

int INDEX = 0;
int VALUE = 0;
int SUM = 0;
int READINGS[WINDOW_SIZE];
int AVERAGED = 0;

// log

byte count;
byte sensorArray[128];
byte drawHeight;
boolean filled = 0; //decide either filled, or dot-display. 0==dot display.

// 'abg', 128x32px
const unsigned char abg[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xe0, 0x1f, 0xfc, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0xe0, 0x03, 0xe0, 0x03, 0xff,
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x07, 0xe3, 0xe3, 0x87, 0xe0, 0xff,
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x47, 0xe0, 0x03, 0x0f, 0xff, 0xff,
    0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0xe3, 0xe0, 0x07, 0x1f, 0x00, 0xff,
    0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xf0, 0x01, 0xe3, 0xe3, 0x0f, 0x00, 0xff,
    0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xe0, 0x00, 0xe3, 0xe1, 0x87, 0xe1, 0xff,
    0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xc3, 0xf8, 0x60, 0x03, 0xe0, 0x03, 0xff,
    0xfe, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc7, 0xfc, 0x60, 0x1f, 0xfe, 0x3f, 0xff,
    0xfc, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x1f, 0xe0, 0x1f, 0xfc, 0x3f, 0xff,
    0xfc, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x0f, 0xe0, 0x03, 0xe0, 0x03, 0xff,
    0xf8, 0x1f, 0x80, 0x7e, 0x01, 0xf8, 0x1f, 0xc1, 0xff, 0xfc, 0x07, 0xe3, 0xe3, 0x87, 0xe0, 0xff,
    0xf8, 0x3f, 0x80, 0x18, 0x01, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x47, 0xe0, 0x03, 0x0f, 0xff, 0xff,
    0xf8, 0x3f, 0x03, 0x81, 0xc0, 0xfc, 0x0f, 0xff, 0xff, 0xf8, 0xe3, 0xe0, 0x07, 0x1f, 0x00, 0xff,
    0xf8, 0x3f, 0x03, 0x81, 0xc0, 0xfc, 0x1f, 0xff, 0xff, 0xf0, 0x01, 0xe3, 0xe3, 0x0f, 0x00, 0xff,
    0xf8, 0x3f, 0x80, 0x18, 0x01, 0xfc, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0xe3, 0xe1, 0x87, 0xe1, 0xff,
    0xf8, 0x1f, 0x80, 0x7e, 0x01, 0xf8, 0x1f, 0xff, 0xff, 0xc3, 0xf8, 0x60, 0x03, 0xe0, 0x03, 0xff,
    0xfc, 0x0f, 0xe0, 0x00, 0x07, 0xf0, 0x1f, 0xff, 0xff, 0xc7, 0xfc, 0x60, 0x1f, 0xfe, 0x3f, 0xff,
    0xfc, 0x07, 0xf8, 0x00, 0x1f, 0xe0, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xe0, 0x07, 0xf0, 0x07, 0xff,
    0xfe, 0x03, 0xff, 0x00, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfe, 0x0f, 0xe0, 0x03, 0xc0, 0x01, 0xff,
    0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x47, 0xe3, 0xe3, 0x8f, 0xf8, 0xff,
    0xff, 0xc0, 0x3f, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xf8, 0xe3, 0xe0, 0x07, 0x1f, 0x00, 0xff,
    0xff, 0xf0, 0x01, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0xe1, 0xe0, 0x03, 0x1f, 0x00, 0xff,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x01, 0xe3, 0xe1, 0x8f, 0xf0, 0xff,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0xe0, 0x03, 0xc0, 0x03, 0xff,
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc7, 0xf8, 0x60, 0x07, 0xf0, 0x0f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

void setup()
{
  Serial.begin(9600);                  // start monitoring raw voltage for calibration
  display.begin(SSD1306_SWITCHCAPVCC); // 3.3V power supply
  display.clearDisplay();              // Clear the display and ram

  display.drawBitmap(0, 0, abg, 128, 64, WHITE);
  display.display();

  delay(2000);

  for (count = 0; count <= 128; count++) //zero all elements
  {
    sensorArray[count] = 0;
  }
}

void loop() // Start loop
{
  int boostmbar = map(analogRead(sensorPin), 21, 961, 100, 2600);
  rawval = analogRead(0); // Read MAP sensor raw value on analog port 0

  SUM = SUM - READINGS[INDEX];       // Remove the oldest entry from the sum
  VALUE = boostmbar;                 // Read the next sensor value
  READINGS[INDEX] = VALUE;           // Add the newest reading to the window
  SUM = SUM + VALUE;                 // Add the newest reading to the sum
  INDEX = (INDEX + 1) % WINDOW_SIZE; // Increment the index, and wrap to 0 if it exceeds the window size

  AVERAGED = SUM / WINDOW_SIZE; // Divide the sum of the window by the window size for the result

  barboost = ((rawval * 0.19) + 10); // Calculate boost value for the graph

  if (boostPeak < boostmbar && boostmbar > 0.50)
  {
    boostPeak = boostmbar;
    boostPeakTimer = millis();
    if (boostMax < boostPeak)
    {
      boostMax = boostPeak;
    }
  }
  else if (boostPeak > boostmbar && (millis() - boostPeakTimer) > boostPeakReset)
  {
    boostPeak = 0.00;
  }

  // log

  drawHeight = map((analogRead(A0) - analogRead(A2)), 0, 1023, 0, 25);

  sensorArray[0] = drawHeight;

  for (count = 55; count <= 128; count++)
  {
    if (filled == false)
    {
      display.drawPixel(count, 71 - sensorArray[count - 55], WHITE);
    }
    else
      display.drawLine(count, 1, count, 71 - sensorArray[count - 55], WHITE);
  }

  for (count = 80; count >= 2; count--) // count down from 160 to 2
  {
    sensorArray[count - 1] = sensorArray[count - 2];
  }

  display.fillRect(0, 0, barboost, 4, WHITE); // Draws the bar depending on the sensor value

  display.setTextSize(1); //Display peak boost

  display.setTextSize(1);
  display.setCursor(97, 20);
  display.println("BOOST");
  display.setTextColor(WHITE);
  display.setTextSize(3);
  display.setCursor(0, 10);
  display.println(((AVERAGED * 0.001) * 14) + 0.12);

  delay(1);
  display.display();
  display.clearDisplay();

  delay(10); // delay half second between numbers
}
